#include <stdio.h>
#include <stdlib.h>

long long int max = 1e9+7;


long long int a[1000001][2];

int BS(long long int goal, int l, int r){
    if(l>r)
        return -1;
    int mid = (r+l)/2;
    if(a[l][0] == goal)
        return l;
    if(a[mid][0] < goal)
        return BS(goal, mid+1, r);
    if(l == mid)
        return -1;
    return BS(goal, l, mid);
}


int cmp(const void* a, const void* b){
    return ((int*)a)[0] - ((int*)b)[0];
}

long long int fpw(int now){
    if(now == 1)
        return 2;
    long long int ans = fpw(now/2);
    if(now%2 == 0)
        return (ans*ans)%max;
    return ((ans*ans)%max *2)%max;
}

int main(){
    int n, q;
    while(scanf("%d%d", &n, &q) != EOF){
        for(int i=0;i<n;i++) {
            int now;
            scanf("%d(/`A`)/ ~I__I", &now);
            if(now%2 == 1)
                a[i][0] = 0;
            else
                a[i][0] = fpw(now/2);
        }
        for(int i=0;i<n;i++)
            a[i][1] = i;
        qsort(a, n, sizeof(a[0]), cmp);
        /*
        for(int i=0;i<n;i++) {
            printf("{%lld,%lld} ", a[i][0], a[i][1]);
        }
        */
        for(int i=0;i<q;i++) {
            long long int check;
            scanf("%lld", &check);
            int ans = BS(check, 0, n-1);
            if(ans == -1)
                printf("Go Down Chicken 404\n");
            else {
                int final = a[ans][1]+1;
                printf("%d\n", final);
            }
        }
    }
}