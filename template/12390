#include <stdio.h>
#include <stdlib.h>

typedef struct _NODE
{
	int number;
	struct _NODE *ptr_to_right_node;
	struct _NODE *ptr_to_left_node;
} Node;


Node* createNode(int i){
    Node* p = (Node*)malloc(sizeof(Node));
    p->number = i;
    p->ptr_to_right_node = NULL;
    p->ptr_to_right_node = NULL;
    return p;
}

Node* buildTree(int* inorder, int* preorder, int inorder_start, int inorder_end);

void showPostorder(Node* root);

void freeTree(Node *root);

Node* buildTree(int* inorder, int* preorder, int inorder_start, int inorder_end){
    //printf("preorder:%d inorder_start:%d inorder_end:%d\n" , *preorder, inorder_start, inorder_end);
    int now = *preorder;
    int i;
    if (inorder_start > inorder_end)
        return NULL;
    Node* p = createNode(now);
    if(inorder_end == inorder_start){
        p->ptr_to_left_node = NULL;
        p->ptr_to_right_node = NULL;
        return p;
    }
    for(i=inorder_start;i<=inorder_end;i++) {
        if (inorder[i] == now)
            break;
    }
    p->ptr_to_left_node = buildTree(inorder, preorder+1,inorder_start, i-1);
    p->ptr_to_right_node = buildTree(inorder, preorder+i+1-inorder_start,i+1, inorder_end);
    return p;
}


void showPostorder(Node* root){
    if(root) {
        showPostorder(root->ptr_to_left_node);
        showPostorder(root->ptr_to_right_node);
        printf("%d ", root->number);
    }
    return;
}

void freeTree(Node* root){
    if(root) {
        freeTree(root->ptr_to_left_node);
        freeTree(root->ptr_to_right_node);
        free(root);
    }
    return;
}