#include <iostream>
#include <utility>
#include <stack>
#include <queue>
using namespace std;
int n, m;
char arr[1005][1005];
int dir_x[4] = {1,-1,0,0};
int dir_y[4] = {0,0,1,-1};
int path[1005][1005];
pair<int, int> start;
void build_path(){
    queue<pair<int, int> > s;
    //cout << start.first << " " << start.second << '\n';
    s.push(start);
    path[start.first][start.second] = 0;
    while(!s.empty()){
        pair<int, int> now = s.front();
        //cout << now.first << " " << now.second << '\n';
        s.pop();
        for(int i=0;i<4;i++){
            pair<int, int> check = now;
            check.first += dir_x[i];
            check.second += dir_y[i];
            if(check.first >= 0 && check.first < n && check.second >= 0 && check.second < m && arr[check.first][check.second] != 'C' && path[check.first][check.second] == -1){
                path[check.first][check.second] = path[now.first][now.second] + 1;
                s.push(check);
            }
        }
    }
}

void show_path(){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            int copy = path[i][j];
            int len = 0;
            if(copy == -1 || copy == 0)
                len++;
            while(copy){
                copy /= 10;
                len++;
            }
            for(int k=len;k<5;k++)
                cout << " ";
            cout << path[i][j];
        }
        cout << "\n";
    }
}


int find(){
    int max = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(arr[i][j] == 'T'){
                if(path[i][j] == -1){
                    max = -1;
                    return max;
                }
                else if(path[i][j] > max)
                    max = path[i][j];
            }
        }
    }
    return max;
}

int main() {
    cin >> n >> m;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++)
            path[i][j] = -1;
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++) {
            cin >> arr[i][j];
            //cout << i << " " << j << " " << arr[i][j] << '\n';
            if(arr[i][j]=='I'){
                start.first = i;
                start.second = j;
            }
        }
    }
    build_path();
    //show_path();
    int ans = find();
    cout << ans << '\n';

}
